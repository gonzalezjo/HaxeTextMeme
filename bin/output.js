// Generated by Haxe 3.4.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.main = function() {
	var output = "";
	var routine = new routines_Capitalized();
	var _g1 = 0;
	var _g = Main.input.length;
	while(_g1 < _g) {
		var i = _g1++;
		output += routine.obfuscate(Main.input.charAt(i));
	}
	console.log(output);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var routines_virtual_AbstractRoutine = function() {
	this.isOpen = false;
};
routines_virtual_AbstractRoutine.prototype = {
	open: function(message) {
		throw new js__$Boot_HaxeError("Attempt to access method of abstract class.");
	}
	,close: function(message) {
		throw new js__$Boot_HaxeError("Attempt to access method of abstract class.");
	}
	,obfuscate: function(message) {
		if(this.isOpen) {
			return this.open(message);
		} else {
			return this.close(message);
		}
	}
};
var routines_impl_IRoutine = function() { };
var routines_Capitalized = function() {
	routines_virtual_AbstractRoutine.call(this);
};
routines_Capitalized.__interfaces__ = [routines_impl_IRoutine];
routines_Capitalized.__super__ = routines_virtual_AbstractRoutine;
routines_Capitalized.prototype = $extend(routines_virtual_AbstractRoutine.prototype,{
	open: function(message) {
		return message.toUpperCase();
	}
	,close: function(message) {
		return message.toUpperCase();
	}
});
Main.input = "Big milk.";
Main.main();
})();
