@classes = $new(null);
@enum_to_string = function()
    return neko.Boot.__enum_str(this)
@serialize = function()
    return neko.Boot.__serialize(this)
@tag_serialize = function()
    return neko.Boot.__tagserialize(this)
@lazy_error = function(e)
    return $varargs(function(_)
        return $throw(e)
    )
@default__string = function()
    return {
        var @s = this.toString();
        if $typeof(@s) != $tobject
            return null;
        return @s.__s;
    }

@closure0 = function(@this,@fun)
    return if @fun == null
        null
    else
        function() {
            this = @this;
            @fun();
        }


@closure1 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a) {
            this = @this;
            @fun(a);
        }


@closure2 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b) {
            this = @this;
            @fun(a,b);
        }


@closure3 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c) {
            this = @this;
            @fun(a,b,c);
        }


@closure4 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c,d) {
            this = @this;
            @fun(a,b,c,d);
        }


@closure5 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c,d,e) {
            this = @this;
            @fun(a,b,c,d,e);
        }


{
}
neko = $new(null);
@classes.neko = neko;
_List = $new(null);
@classes._List = _List;
frontend = $new(null);
@classes.frontend = frontend;
frontend.impl = $new(null);
haxe = $new(null);
@classes.haxe = haxe;
haxe._Int64 = $new(null);
haxe.ds = $new(null);
haxe.io = $new(null);
routines = $new(null);
@classes.routines = routines;
routines.virtual = $new(null);
routines.impl = $new(null);
sys = $new(null);
@classes.sys = sys;
sys.io = $new(null);
{
    var @tmp = $new(null);
    neko.@Lib = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.Lib = @tmp;
    @tmp.prototype = neko.@Lib;
    @tmp.rethrow = function(e) {
        return $rethrow(e);
    }
    @tmp.load = function(lib,prim,nargs) {
        return $loader.loadprim(( (lib + String.new("@")) + prim ).__s,nargs);
    }
    neko.@Lib.__class__ = neko.Lib;
}
{
    var @tmp = $new(null);
    @Array = @tmp;
    @tmp.unshift = function(x) {
        var l = this.length;
        this.__grow(l + 1);
        var a = this.__a;
        neko.NativeArray.blit(a,1,a,0,l);
        a[0] = x;
        return null;
    }
    @tmp.toString = function() {
        var s = StringBuf.new();
        s.add(String.new("["));
        var it = this.iterator();
        {
            var i = it;
            while ( i.hasNext() ) {
                var i1 = i.next();
                s.add(i1);
                if ( it.hasNext() )
                    s.addChar(44);
            }
        }
        s.add(String.new("]"));
        return s.toString();
    }
    @tmp.splice = function(pos,len) {
        if ( len < 0 )
            return Array.new();
        if ( pos < 0 ) {
            pos = (this.length + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( pos > this.length ) {
            pos = 0;
            len = 0;
        }
        else
            if ( (pos + len) > this.length ) {
                len = (this.length - pos);
                if ( len < 0 )
                    len = 0;
            }

        var a = this.__a;
        var ret = Array.new1(neko.NativeArray.sub(a,pos,len),len);
        var end = pos + len;
        neko.NativeArray.blit(a,pos,a,end,this.length - end);
        this.length -= len;
        while ( (len -= 1) >= 0 )
            a[this.length + len] = null
        return ret;
    }
    @tmp.sort = function(f) {
        var a = this.__a;
        var i = 0;
        var l = this.length;
        while ( i < l ) {
            var swap = false;
            var j = 0;
            var max = (l - i) - 1;
            while ( j < max ) {
                if ( f(a[j],a[j + 1]) > 0 ) {
                    var tmp = a[j + 1];
                    a[j + 1] = a[j];
                    a[j] = tmp;
                    swap = true;
                }
                j += 1;
            }
            if ( $not(swap) )
                break;;
            i += 1;
        }
        return null;
    }
    @tmp.slice = function(pos,end) {
        if ( pos < 0 ) {
            pos = (this.length + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( end == null )
            end = this.length
        else
            if ( end < 0 )
                end = (this.length + end);

        if ( end > this.length )
            end = this.length;
        var len = end - pos;
        if ( len < 0 )
            return Array.new();
        return Array.new1(neko.NativeArray.sub(this.__a,pos,len),len);
    }
    @tmp.shift = function() {
        var l = this.length;
        if ( l == 0 )
            return null;
        var a = this.__a;
        var x = a[0];
        l -= 1;
        neko.NativeArray.blit(a,0,a,1,l);
        a[l] = null;
        this.length = l;
        return x;
    }
    @tmp.reverse = function() {
        var i = 0;
        var l = this.length;
        var a = this.__a;
        var half = l >> 1;
        l -= 1;
        while ( i < half ) {
            var tmp = a[i];
            a[i] = a[l - i];
            a[l - i] = tmp;
            i += 1;
        }
        return null;
    }
    @tmp.remove = function(x) {
        var i = 0;
        var l = this.length;
        var a = this.__a;
        while ( i < l ) {
            if ( a[i] == x ) {
                neko.NativeArray.blit(a,i,a,i + 1,(l - i) - 1);
                this.length = (l -= 1);
                a[l] = null;
                return true;
            }
            i += 1;
        }
        return false;
    }
    @tmp.push = function(x) {
        var l = this.length;
        this.__grow(l + 1);
        this.__a[l] = x;
        return l + 1;
    }
    @tmp.pop = function() {
        if ( this.length == 0 )
            return null;
        this.length -= 1;
        var x = this.__a[this.length];
        this.__a[this.length] = null;
        return x;
    }
    @tmp.map = function(f) {
        var ret = Array.new1($array(),0);
        {
            var _g = 0;
            var _g1 = this;
            while ( _g < _g1.length ) {
                var elt = _g1[_g];
                _g += 1;
                ret.push(f(elt));
            }
        }
        return ret;
    }
    @tmp.length = null;
    @tmp.lastIndexOf = function(x,fromIndex) {
        var len = this.length;
        var i = if ( fromIndex != null )
            fromIndex
        else
            len - 1
        ;
        var a = this.__a;
        if ( i >= len )
            i = (len - 1)
        else
            if ( i < 0 )
                i += len;

        while ( i >= 0 ) {
            if ( a[i] == x )
                return i;
            i -= 1;
        }
        return -1;
    }
    @tmp.join = function(sep) {
        var s = StringBuf.new();
        var a = this.__a;
        var max = this.length - 1;
        {
            var _g1 = 0;
            var _g = this.length;
            while ( _g1 < _g ) {
                var p = _g1 ++= 1;
                s.add(a[p]);
                if ( p != max )
                    s.add(sep);
            }
        }
        return s.toString();
    }
    @tmp.iterator = function() {
        return {
            a => this, 
            p => 0, 
            hasNext => function() {
                return this.p < this.a.length;
            }
            , 
            next => function() {
                var i = this.a.__a[this.p];
                this.p += 1;
                return i;
            }


        };
    }
    @tmp.insert = function(pos,x) {
        var l = this.length;
        if ( pos < 0 ) {
            pos = (l + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( pos > l )
            pos = l;
        this.__grow(l + 1);
        var a = this.__a;
        neko.NativeArray.blit(a,pos + 1,a,pos,l - pos);
        a[pos] = x;
        return null;
    }
    @tmp.indexOf = function(x,fromIndex) {
        var len = this.length;
        var i = if ( fromIndex != null )
            fromIndex
        else
            0
        ;
        var a = this.__a;
        if ( i < 0 ) {
            i += len;
            if ( i < 0 )
                i = 0;
        }
        while ( i < len ) {
            if ( a[i] == x )
                return i;
            i += 1;
        }
        return -1;
    }
    @tmp.filter = function(f) {
        var ret = Array.new1($array(),0);
        {
            var _g = 0;
            var _g1 = this;
            while ( _g < _g1.length ) {
                var elt = _g1[_g];
                _g += 1;
                if ( f(elt) )
                    ret.push(elt);
            }
        }
        return ret;
    }
    @tmp.copy = function() {
        return Array.new1(neko.NativeArray.sub(this.__a,0,this.length),this.length);
    }
    @tmp.concat = function(a) {
        var a1 = this.__a;
        var a2 = a.__a;
        var s1 = this.length;
        var s2 = a.length;
        var a3 = neko.NativeArray.alloc(s1 + s2);
        neko.NativeArray.blit(a3,0,a1,0,s1);
        neko.NativeArray.blit(a3,s1,a2,0,s2);
        return Array.new1(a3,s1 + s2);
    }
    @tmp.__set = function(pos,v) {
        var a = this.__a;
        if ( this.length <= pos ) {
            var l = pos + 1;
            var dlen = l - neko.NativeArray.length(a);
            if ( dlen > 0 ) {
                if ( dlen == 1 ) {
                    this.__grow(l);
                    a = this.__a;
                }
                else {
                    a = neko.NativeArray.alloc(l);
                    neko.NativeArray.blit(a,0,this.__a,0,this.length);
                    this.__a = a;
                }
            }
            this.length = l;
        }
        a[pos] = v;
        return v;
    }
    @tmp.__neko = function() {
        var a = this.__a;
        var sz = neko.NativeArray.length(a);
        if ( sz != this.length ) {
            a = neko.NativeArray.sub(a,0,this.length);
            this.__a = a;
        }
        return a;
    }
    @tmp.__grow = function(l) {
        var a = this.__a;
        var sz = neko.NativeArray.length(a);
        if ( sz >= l ) {
            this.length = l;
            return null;
        }
        var big = (sz * 3) >> 1;
        if ( big < l )
            big = l;
        var a2 = neko.NativeArray.alloc(big);
        neko.NativeArray.blit(a2,0,a,0,this.length);
        this.__a = a2;
        this.length = l;
        return null;
    }
    @tmp.__get = function(pos) {
        return this.__a[pos];
    }
    @tmp.__a = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    Array = @tmp;
    @tmp.prototype = @Array;
    @tmp.new1 = function(a,l) {
        var inst = Array.new();
        inst.__a = a;
        inst.length = l;
        return inst;
    }
    @tmp.__construct__ = function() {
        this.__a = neko.NativeArray.alloc(0);
        this.length = 0;
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,@Array);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @Array.__class__ = Array;
    @classes.Array = Array;
}
{
    var @tmp = $new(null);
    @Date = @tmp;
    @tmp.toString = function() {
        return String.new(Date.date_format(this.__t,null));
    }
    @tmp.__t = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    Date = @tmp;
    @tmp.prototype = @Date;
    @tmp.date_format = $loader.loadprim(("std" + "@") + "date_format",2);
    @tmp.__string = function() {
        return String.new("Date").__s;
    }
    @Date.__class__ = Date;
    @classes.Date = Date;
}
{
    var @tmp = $new(null);
    neko.@NativeArray = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.NativeArray = @tmp;
    @tmp.prototype = neko.@NativeArray;
    @tmp.sub = function(a,pos,len) {
        return $asub(a,pos,len);
    }
    @tmp.length = function(a) {
        return $asize(a);
    }
    @tmp.blit = function(dst,dstPos,src,srcPos,length) {
        $ablit(dst,dstPos,src,srcPos,length);
        return null;
    }
    @tmp.alloc = function(length) {
        return $amake(length);
    }
    neko.@NativeArray.__class__ = neko.NativeArray;
}
{
    var @tmp = $new(null);
    frontend.impl.@IUserInterface = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    frontend.impl.IUserInterface = @tmp;
    @tmp.prototype = frontend.impl.@IUserInterface;
    frontend.impl.@IUserInterface.__class__ = frontend.impl.IUserInterface;
}
{
    var @tmp = $new(null);
    frontend.@CommandLineUserInterface = @tmp;
    @tmp.readUserInput = function() {
        return Sys.stdin().readLine();
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    frontend.CommandLineUserInterface = @tmp;
    @tmp.prototype = frontend.@CommandLineUserInterface;
    @tmp.__construct__ = function() {
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,frontend.@CommandLineUserInterface);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @tmp.__interfaces__ = $array(frontend.impl.IUserInterface);
    frontend.@CommandLineUserInterface.__class__ = frontend.CommandLineUserInterface;
}
{
    var @tmp = $new(null);
    @Main = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Main = @tmp;
    @tmp.prototype = @Main;
    @tmp.main = function() {
        var output = String.new("");
        var routine = routines.CapitalizedLetter.new();
        {
            var _g1 = 0;
            var _g = Main.input.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                output += routine.obfuscate(Main.input.charAt(i));
            }
        }
        haxe.Log.trace(output,{
            fileName => String.new("Main.hx"), 
            lineNumber => 18, 
            className => String.new("Main"), 
            methodName => String.new("main")

        });
        return null;
    }
    @tmp.input = null;
    @tmp.DEBUG_MODE = null;
    @Main.__class__ = Main;
    @classes.Main = Main;
}
{
    var @tmp = $new(null);
    @Math = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Math = @tmp;
    @tmp.prototype = @Math;
    @tmp.random = function() {
        return Math._rand_float(Math.__rnd);
    }
    @tmp.min = function(a,b) {
        if ( a < b )
            return a
        else
            if ( $isnan(a) )
                return a
            else
                return b

        return null;
    }
    @tmp.max = function(a,b) {
        if ( a < b )
            return b
        else
            if ( $isnan(b) )
                return b
            else
                return a

        return null;
    }
    @tmp.isNaN = function(f) {
        return $isnan(f);
    }
    @tmp.isFinite = function(f) {
        return $not(( $isinfinite(f) || $isnan(f) ));
    }
    @tmp._rand_int = $loader.loadprim(("std" + "@") + "random_int",2);
    @tmp._rand_float = $loader.loadprim(("std" + "@") + "random_float",1);
    @tmp.__rnd = null;
    @Math.__class__ = Math;
    @classes.Math = Math;
}
{
    var @tmp = $new(null);
    neko.@Boot = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.Boot = @tmp;
    @tmp.prototype = neko.@Boot;
    @tmp.__unserialize = function(v) {
        if ( $typeof(v) != $tarray )
            $throw(String.new("Invalid serialized class data"));
        {
            var _g1 = 0;
            var _g = $asize(v);
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                if ( $typeof(v[i]) != $tstring )
                    $throw(String.new("Invalid serialized class data"));
            }
        }
        var cl = neko.Boot.__classes;
        {
            var _g11 = 0;
            var _g2 = $asize(v);
            while ( _g11 < _g2 ) {
                var i1 = _g11 ++= 1;
                cl = $objget(cl,$hash(v[i1]));
                if ( cl == null )
                    $throw(String.new("Class not found ") + Std.string(v));
            }
        }
        if ( $typeof(cl) == $tobject ) {
            if ( (cl.__name__ != null) || (cl.__ename__ != null) )
                return cl.prototype;
            if ( (cl.__enum__ != null) && ($typeof(cl.tag) == $tstring) )
                return cl;
        }
        $throw(String.new("Invalid class ") + Std.string(v));
        return null;
    }
    @tmp.__tmp_str = function() {
        return String.new("<...>").__s;
    }
    @tmp.__tagserialize = function(o) {
        var n = o.__enum__.__ename__;
        var x = $amake(n.length + 1);
        {
            var _g1 = 0;
            var _g = n.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                x[i] = n[i].__s;
            }
        }
        x[n.length] = o.tag;
        return x;
    }
    @tmp.__serialize = function(o) {
        if ( o.__class__ != null ) {
            var n = o.__class__.__name__;
            var x = $amake(n.length);
            {
                var _g1 = 0;
                var _g = n.length;
                while ( _g1 < _g ) {
                    var i = _g1 ++= 1;
                    x[i] = n[i].__s;
                }
            }
            return x;
        }
        if ( o.__enum__ != null ) {
            var n1 = o.__enum__.__ename__;
            var x1 = $amake(n1.length);
            {
                var _g11 = 0;
                var _g2 = n1.length;
                while ( _g11 < _g2 ) {
                    var i1 = _g11 ++= 1;
                    x1[i1] = n1[i1].__s;
                }
            }
            return x1;
        }
        $throw(String.new("Can't serialize"));
        return null;
    }
    @tmp.__interfLoop = function(cc,cl) {
        if ( cc == null )
            return false;
        if ( cc == cl )
            return true;
        var intf = cc.__interfaces__;
        if ( intf != null ) {
            var _g1 = 0;
            var _g = intf.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                var i1 = intf[i];
                if ( (i1 == cl) || neko.Boot.__interfLoop(i1,cl) )
                    return true;
            }
        }
        return neko.Boot.__interfLoop(cc.__super__,cl);
    }
    @tmp.__instanceof = function(o,cl) {
        if ( cl == Dynamic )
            return true;
        var _g = $typeof(o);
        switch ( _g ){
        1 => 
            if ( cl != Int )
                return cl == Float
            else
                return true

        2 => 
            if ( cl != Float ) {
                if ( cl == Int )
                    return $int(o) == o
                else
                    return false
            }
            else
                return true

        3 => 
            return cl == Bool
        5 => 
            {
                if ( cl == null )
                    return false;
                if ( $not(( (neko.Boot.__interfLoop(o.__class__,cl) || (o.__enum__ == cl)) || ((cl == Class) && (o.__name__ != null)) )) ) {
                    if ( cl == Enum )
                        return o.__ename__ != null
                    else
                        return false
                }
                else
                    return true
            }

        default => 
            return false
        }
        return null;
    }
    @tmp.__init = function() {
        $exports.__unserialize = neko.Boot.__unserialize;
        $exports.__classes = neko.Boot.__classes;
        return null;
    }
    @tmp.__enum_str = function(e) {
        if ( e.args == null )
            return e.tag;
        var s = e.tag + String.new("(").__s;
        var i = 0;
        var l = $asize(e.args);
        var old = e.__string;
        e.__string = neko.Boot.__tmp_str;
        while ( i < l ) {
            if ( i != 0 )
                s += String.new(",").__s;
            try {
                s += $string(e.args[i]);
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var err = @tmp;
                    {
                        s += neko.Boot.__tmp_str();
                    }
                }
                else
                    $rethrow(@tmp)
            }
            i += 1;
        }
        e.__string = old;
        return s + String.new(")").__s;
    }
    neko.@Boot.__class__ = neko.Boot;
}
{
    var @tmp = $new(null);
    @Std = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Std = @tmp;
    @tmp.prototype = @Std;
    @tmp.string = function(s) {
        return String.new($string(s));
    }
    @Std.__class__ = Std;
    @classes.Std = Std;
}
{
    var @tmp = $new(null);
    @String = @tmp;
    @tmp.toUpperCase = function() {
        var s = this.__s;
        var l = this.length;
        var s2 = $scopy(s);
        var i = 0;
        while ( i < l ) {
            var c = $sget(s,i);
            if ( (c >= 97) && (c <= 122) )
                $sset(s2,i,(c - 97) + 65);
            i += 1;
        }
        return String.new(s2);
    }
    @tmp.toString = function() {
        return this;
    }
    @tmp.toLowerCase = function() {
        var s = this.__s;
        var l = this.length;
        var s2 = $scopy(s);
        var i = 0;
        while ( i < l ) {
            var c = $sget(s,i);
            if ( (c >= 65) && (c <= 90) )
                $sset(s2,i,(c - 65) + 97);
            i += 1;
        }
        return String.new(s2);
    }
    @tmp.substring = function(startIndex,endIndex) {
        if ( endIndex == null )
            endIndex = this.length
        else
            if ( endIndex < 0 )
                endIndex = 0
            else
                if ( endIndex > this.length )
                    endIndex = this.length;


        if ( startIndex < 0 )
            startIndex = 0
        else
            if ( startIndex > this.length )
                startIndex = this.length;

        if ( startIndex > endIndex ) {
            var tmp = startIndex;
            startIndex = endIndex;
            endIndex = tmp;
        }
        return this.substr(startIndex,endIndex - startIndex);
    }
    @tmp.substr = function(pos,len) {
        if ( len == 0 )
            return String.new("");
        var sl = this.length;
        if ( len == null )
            len = sl;
        if ( pos == null )
            pos = 0;
        if ( (pos != 0) && (len < 0) )
            return String.new("");
        if ( pos < 0 ) {
            pos = (sl + pos);
            if ( pos < 0 )
                pos = 0;
        }
        else
            if ( len < 0 )
                len = ((sl + len) - pos);

        if ( (pos + len) > sl )
            len = (sl - pos);
        if ( (pos < 0) || (len <= 0) )
            return String.new("");
        return String.new($ssub(this.__s,pos,len));
    }
    @tmp.split = function(delimiter) {
        var l = String.__split(this.__s,delimiter.__s);
        var a = Array.new();
        if ( l == null ) {
            a.push(String.new(""));
            return a;
        }
        while ( true ) {
            a.push(String.new(l[0]));
            l = l[1];
            if ( $not(( l != null )) )
                break;;
        }
        return a;
    }
    @tmp.length = null;
    @tmp.lastIndexOf = function(str,startIndex) {
        var last = -1;
        if ( startIndex == null )
            startIndex = $ssize(this.__s);
        while ( true ) {
            var p;
            try {
                p = $sfind(this.__s,last + 1,str.__s);
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var e = @tmp;
                    {
                        p = null;
                    }
                }
                else
                    $rethrow(@tmp)
            }
            if ( (p == null) || (p > startIndex) )
                return last;
            last = p;
        }
        return null;
    }
    @tmp.indexOf = function(str,startIndex) {
        var p;
        try {
            p = $sfind(this.__s,if ( startIndex == null )
                0
            else
                startIndex
            ,str.__s);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    p = null;
                }
            }
            else
                $rethrow(@tmp)
        }
        if ( p == null )
            return -1;
        return p;
    }
    @tmp.charCodeAt = function(index) {
        return $sget(this.__s,index);
    }
    @tmp.charAt = function(index) {
        try {
            var s = $smake(1);
            $sset(s,0,$sget(this.__s,index));
            return String.new(s);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    return String.new("");
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.__radd = function(s) {
        return String.new($string(s) + this.__s);
    }
    @tmp.__compare = function(o) {
        return $compare(this.__s,o.__s);
    }
    @tmp.__add = function(s) {
        var tmp = $string(s);
        return String.new(this.__s + tmp);
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    String = @tmp;
    @tmp.prototype = @String;
    @tmp.fromCharCode = function(code) {
        var s = $smake(1);
        $sset(s,0,code);
        return String.new(s);
    }
    @tmp.__split = $loader.loadprim(("std" + "@") + "string_split",2);
    @tmp.__is_String = null;
    @tmp.__construct__ = function(string) {
        if ( $typeof(string) != $tstring )
            string = $string(string);
        this.__s = string;
        this.length = $ssize(string);
        return null;
    }
    @tmp.new = function(string) {
        var @o = $new(null);
        $objsetproto(@o,@String);
        $call(this.__construct__,@o,$array(string));
        return @o;
    }
    @String.__class__ = String;
    @classes.String = String;
}
{
    var @tmp = $new(null);
    @StringBuf = @tmp;
    @tmp.toString = function() {
        return String.new(StringBuf.__to_string(this.b));
    }
    @tmp.b = null;
    @tmp.addChar = function(c) {
        StringBuf.__add_char(this.b,c);
        return null;
    }
    @tmp.add = function(x) {
        StringBuf.__add(this.b,x);
        return null;
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    StringBuf = @tmp;
    @tmp.prototype = @StringBuf;
    @tmp.__to_string = $loader.loadprim(("std" + "@") + "buffer_string",1);
    @tmp.__make = $loader.loadprim(("std" + "@") + "buffer_new",0);
    @tmp.__add_char = $loader.loadprim(("std" + "@") + "buffer_add_char",2);
    @tmp.__add = $loader.loadprim(("std" + "@") + "buffer_add",2);
    @tmp.__construct__ = function() {
        this.b = StringBuf.__make();
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,@StringBuf);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @StringBuf.__class__ = StringBuf;
    @classes.StringBuf = StringBuf;
}
{
    var @tmp = $new(null);
    @Sys = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Sys = @tmp;
    @tmp.prototype = @Sys;
    @tmp.stdin = function() {
        return sys.io.FileInput.new(Sys.file_stdin());
    }
    @tmp.file_stdin = $loader.loadprim(("std" + "@") + "file_stdin",0);
    @Sys.__class__ = Sys;
    @classes.Sys = Sys;
}
{
    var @tmp = $new(null);
    haxe.@Log = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.Log = @tmp;
    @tmp.prototype = haxe.@Log;
    @tmp.trace = function(v,infos) {
        $print(((infos.fileName + String.new(":")) + infos.lineNumber) + String.new(": "),v);
        if ( infos.customParams != null ) {
            var _g = 0;
            var _g1 = infos.customParams;
            while ( _g < _g1.length ) {
                var v1 = _g1[_g];
                _g += 1;
                $print(String.new(","),v1);
            }
        }
        $print(String.new("\n"));
        return null;
    }
    haxe.@Log.__class__ = haxe.Log;
}
{
    var @tmp = $new(null);
    haxe.io.@Bytes = @tmp;
    @tmp.toString = function() {
        return String.new($ssub(this.b,0,this.length));
    }
    @tmp.length = null;
    @tmp.b = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.io.Bytes = @tmp;
    @tmp.prototype = haxe.io.@Bytes;
    @tmp.__construct__ = function(length,b) {
        this.length = length;
        this.b = b;
        return null;
    }
    @tmp.new = function(length,b) {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@Bytes);
        $call(this.__construct__,@o,$array(length,b));
        return @o;
    }
    haxe.io.@Bytes.__class__ = haxe.io.Bytes;
}
{
    var @tmp = $new(null);
    haxe.io.@BytesBuffer = @tmp;
    @tmp.getBytes = function() {
        var str = StringBuf.__to_string(this.b);
        var bytes = haxe.io.Bytes.new($ssize(str),str);
        this.b = null;
        return bytes;
    }
    @tmp.b = null;
    @tmp.addByte = function(byte) {
        StringBuf.__add_char(this.b,byte);
        return null;
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.io.BytesBuffer = @tmp;
    @tmp.prototype = haxe.io.@BytesBuffer;
    @tmp.__construct__ = function() {
        this.b = StringBuf.__make();
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@BytesBuffer);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    haxe.io.@BytesBuffer.__class__ = haxe.io.BytesBuffer;
}
{
    var @tmp = $new(null);
    haxe.io.@Input = @tmp;
    @tmp.readLine = function() {
        var buf = haxe.io.BytesBuffer.new();
        var last;
        var s;
        try {
            while ( true ) {
                last = this.readByte();
                if ( $not(( last != 10 )) )
                    break;;
                buf.addByte(last);
            }
            s = buf.getBytes().toString();
            if ( s.charCodeAt(s.length - 1) == 13 )
                s = s.substr(0,-1);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if neko.Boot.__instanceof(@tmp,haxe.io.Eof) {
                var e = @tmp;
                {
                    s = buf.getBytes().toString();
                    if ( s.length == 0 )
                        neko.Lib.rethrow(e);
                }
            }
            else
                $rethrow(@tmp)
        }
        return s;
    }
    @tmp.readByte = function() {
        $throw(String.new("Not implemented"));
        return null;
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.io.Input = @tmp;
    @tmp.prototype = haxe.io.@Input;
    haxe.io.@Input.__class__ = haxe.io.Input;
}
{
    var @tmp = $new(null);
    haxe.io.@Eof = @tmp;
    @tmp.toString = function() {
        return String.new("Eof");
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.io.Eof = @tmp;
    @tmp.prototype = haxe.io.@Eof;
    @tmp.__construct__ = function() {
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@Eof);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    haxe.io.@Eof.__class__ = haxe.io.Eof;
}
{
    @G0 = $new(null);
    haxe.io.Error = @G0;
    @G0.prototype = {
        __enum__ => @G0, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G0.Overflow = {
        var @tmp = {
            tag => "Overflow", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G0.prototype);
        @tmp;
    }
    @G0.OutsideBounds = {
        var @tmp = {
            tag => "OutsideBounds", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G0.prototype);
        @tmp;
    }
    @G0.Custom = function(e) {
        var @tmp = {
            tag => "Custom", 
            index => 3, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G0.prototype);
        @tmp;
    }
    @G0.Blocked = {
        var @tmp = {
            tag => "Blocked", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G0.prototype);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    neko.@NativeString = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.NativeString = @tmp;
    @tmp.prototype = neko.@NativeString;
    neko.@NativeString.__class__ = neko.NativeString;
}
{
    var @tmp = $new(null);
    routines.virtual.@AbstractRoutine = @tmp;
    @tmp.open = function(message) {
        $throw(String.new("Attempt to access method of abstract class."));
        return null;
    }
    @tmp.obfuscate = function(message) {
        if ( this.isOpen )
            return this.open(message)
        else
            return this.close(message)
        return null;
    }
    @tmp.isOpen = null;
    @tmp.close = function(message) {
        $throw(String.new("Attempt to access method of abstract class."));
        return null;
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    routines.virtual.AbstractRoutine = @tmp;
    @tmp.prototype = routines.virtual.@AbstractRoutine;
    @tmp.__construct__ = function() {
        this.isOpen = false;
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,routines.virtual.@AbstractRoutine);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    routines.virtual.@AbstractRoutine.__class__ = routines.virtual.AbstractRoutine;
}
{
    var @tmp = $new(null);
    routines.impl.@IRoutine = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    routines.impl.IRoutine = @tmp;
    @tmp.prototype = routines.impl.@IRoutine;
    routines.impl.@IRoutine.__class__ = routines.impl.IRoutine;
}
{
    var @tmp = $new(null);
    routines.@CapitalizedLetter = @tmp;
    @tmp.open = function(message) {
        return message.toUpperCase();
    }
    @tmp.close = function(message) {
        return message.toUpperCase();
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    routines.CapitalizedLetter = @tmp;
    @tmp.prototype = routines.@CapitalizedLetter;
    @tmp.__construct__ = function() {
        $call(routines.virtual.AbstractRoutine.__construct__,this,$array());
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,routines.@CapitalizedLetter);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @tmp.__interfaces__ = $array(routines.impl.IRoutine);
    @tmp.__super__ = routines.virtual.AbstractRoutine;
    $objsetproto(routines.@CapitalizedLetter,routines.virtual.@AbstractRoutine);
    routines.@CapitalizedLetter.__class__ = routines.CapitalizedLetter;
}
{
    @G1 = $new(null);
    sys.io.FileHandle = @G1;
    @G1.prototype = {
        __enum__ => @G1, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
}
{
    var @tmp = $new(null);
    sys.io.@FileInput = @tmp;
    @tmp.readByte = function() {
        try {
            return sys.io.FileInput.file_read_char(this.__f);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    if ( $typeof(e) == $tarray )
                        $throw(haxe.io.Eof.new())
                    else
                        $throw(haxe.io.Error.Custom(e))
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.__f = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    sys.io.FileInput = @tmp;
    @tmp.prototype = sys.io.@FileInput;
    @tmp.file_tell = $loader.loadprim(("std" + "@") + "file_tell",1);
    @tmp.file_seek = $loader.loadprim(("std" + "@") + "file_seek",3);
    @tmp.file_read_char = $loader.loadprim(("std" + "@") + "file_read_char",1);
    @tmp.file_read = $loader.loadprim(("std" + "@") + "file_read",4);
    @tmp.file_eof = $loader.loadprim(("std" + "@") + "file_eof",1);
    @tmp.file_close = $loader.loadprim(("std" + "@") + "file_close",1);
    @tmp.__construct__ = function(f) {
        this.__f = f;
        return null;
    }
    @tmp.new = function(f) {
        var @o = $new(null);
        $objsetproto(@o,sys.io.@FileInput);
        $call(this.__construct__,@o,$array(f));
        return @o;
    }
    @tmp.__super__ = haxe.io.Input;
    $objsetproto(sys.io.@FileInput,haxe.io.@Input);
    sys.io.@FileInput.__class__ = sys.io.FileInput;
}
{
    neko.Boot.__classes = @classes;
    neko.Boot.__init();
}
sys.io.FileInput.__name__ = Array.new1($array(String.new("sys"),String.new("io"),String.new("FileInput")),3);
sys.io.FileHandle.__ename__ = Array.new1($array(String.new("sys"),String.new("io"),String.new("FileHandle")),3);
sys.io.FileHandle.__constructs__ = Array.new1($array(),0);
routines.CapitalizedLetter.__name__ = Array.new1($array(String.new("routines"),String.new("CapitalizedLetter")),2);
routines.CapitalizedLetter.__interfaces__ = Array.new1(routines.CapitalizedLetter.__interfaces__,1);
routines.impl.IRoutine.__name__ = Array.new1($array(String.new("routines"),String.new("impl"),String.new("IRoutine")),3);
routines.virtual.AbstractRoutine.__name__ = Array.new1($array(String.new("routines"),String.new("virtual"),String.new("AbstractRoutine")),3);
neko.NativeString.__name__ = Array.new1($array(String.new("neko"),String.new("NativeString")),2);
haxe.io.Error.__ename__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Error")),3);
haxe.io.Error.__constructs__ = Array.new1($array(String.new("Blocked"),String.new("Overflow"),String.new("OutsideBounds"),String.new("Custom")),4);
haxe.io.Eof.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Eof")),3);
haxe.io.Input.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Input")),3);
haxe.io.BytesBuffer.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("BytesBuffer")),3);
haxe.io.Bytes.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Bytes")),3);
haxe.Log.__name__ = Array.new1($array(String.new("haxe"),String.new("Log")),2);
Sys.__name__ = Array.new1($array(String.new("Sys")),1);
StringBuf.__name__ = Array.new1($array(String.new("StringBuf")),1);
String.__name__ = Array.new1($array(String.new("String")),1);
Std.__name__ = Array.new1($array(String.new("Std")),1);
neko.Boot.__name__ = Array.new1($array(String.new("neko"),String.new("Boot")),2);
Math.__name__ = Array.new1($array(String.new("Math")),1);
Main.__name__ = Array.new1($array(String.new("Main")),1);
frontend.CommandLineUserInterface.__name__ = Array.new1($array(String.new("frontend"),String.new("CommandLineUserInterface")),2);
frontend.CommandLineUserInterface.__interfaces__ = Array.new1(frontend.CommandLineUserInterface.__interfaces__,1);
frontend.impl.IUserInterface.__name__ = Array.new1($array(String.new("frontend"),String.new("impl"),String.new("IUserInterface")),3);
neko.NativeArray.__name__ = Array.new1($array(String.new("neko"),String.new("NativeArray")),2);
Date.__name__ = Array.new1($array(String.new("Date")),1);
Array.__name__ = Array.new1($array(String.new("Array")),1);
neko.Lib.__name__ = Array.new1($array(String.new("neko"),String.new("Lib")),2);
try {
    var msort = $array(neko.Lib.load(String.new("std"),String.new("merge_sort"),3));
    Array.prototype.sort = function(cmp) {
        msort[0](this.__a,this.length,cmp);
        return null;
    }
}
catch @tmp {
    if $typeof(@tmp) == $tstring
        @tmp = String.new(@tmp);
    if true {
        var e = @tmp;
        {
        }
    }
    else
        $rethrow(@tmp)
}
{
    var M = Math;
    Math.__rnd = neko.Lib.load(String.new("std"),String.new("random_new"),0)();
    M.PI = neko.Lib.load(String.new("std"),String.new("math_pi"),0)();
    M.NaN = (0.0 / 0.0);
    M.POSITIVE_INFINITY = (1.0 / 0.0);
    M.NEGATIVE_INFINITY = (0 - M.POSITIVE_INFINITY);
    M.abs = neko.Lib.load(String.new("std"),String.new("math_abs"),1);
    M.sin = neko.Lib.load(String.new("std"),String.new("math_sin"),1);
    M.cos = neko.Lib.load(String.new("std"),String.new("math_cos"),1);
    M.atan2 = neko.Lib.load(String.new("std"),String.new("math_atan2"),2);
    M.tan = neko.Lib.load(String.new("std"),String.new("math_tan"),1);
    M.exp = neko.Lib.load(String.new("std"),String.new("math_exp"),1);
    M.log = neko.Lib.load(String.new("std"),String.new("math_log"),1);
    M.sqrt = neko.Lib.load(String.new("std"),String.new("math_sqrt"),1);
    M.round = neko.Lib.load(String.new("std"),String.new("math_round"),1);
    M.floor = neko.Lib.load(String.new("std"),String.new("math_floor"),1);
    M.ceil = neko.Lib.load(String.new("std"),String.new("math_ceil"),1);
    M.atan = neko.Lib.load(String.new("std"),String.new("math_atan"),1);
    M.asin = neko.Lib.load(String.new("std"),String.new("math_asin"),1);
    M.acos = neko.Lib.load(String.new("std"),String.new("math_acos"),1);
    M.pow = neko.Lib.load(String.new("std"),String.new("math_pow"),2);
    var tmp;
    try {
        tmp = neko.Lib.load(String.new("std"),String.new("math_fceil"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var e = @tmp;
            {
                tmp = M.ceil;
            }
        }
        else
            $rethrow(@tmp)
    }
    M.fceil = tmp;
    var tmp1;
    try {
        tmp1 = neko.Lib.load(String.new("std"),String.new("math_ffloor"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var e1 = @tmp;
            {
                tmp1 = M.floor;
            }
        }
        else
            $rethrow(@tmp)
    }
    M.ffloor = tmp1;
    var tmp2;
    try {
        tmp2 = neko.Lib.load(String.new("std"),String.new("math_fround"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var e2 = @tmp;
            {
                tmp2 = M.round;
            }
        }
        else
            $rethrow(@tmp)
    }
    M.fround = tmp2;
}
{
    Int = {
        __name__ => Array.new1($array(String.new("Int")),1)

    };
    Float = {
        __name__ => Array.new1($array(String.new("Float")),1)

    };
    Bool = {
        __ename__ => Array.new1($array(String.new("Bool")),1)

    };
    Dynamic = {
        __name__ => Array.new1($array(String.new("Dynamic")),1)

    };
    Class = {
        __name__ => Array.new1($array(String.new("Class")),1)

    };
    Enum = $new(null);
    var cl = neko.Boot.__classes;
    cl.Int = Int;
    cl.Float = Float;
    cl.Bool = Bool;
    cl.Dynamic = Dynamic;
    cl.Class = Class;
    cl.Enum = Enum;
}
String.__is_String = true;
haxe.io.Input.prototype.bigEndian = false;
Date.date_format = neko.Lib.load(String.new("std"),String.new("date_format"),2);
Main.DEBUG_MODE = false;
Main.input = if ( Main.DEBUG_MODE )
    String.new("Big milk.")
else
    frontend.CommandLineUserInterface.new().readUserInput()
Math._rand_float = neko.Lib.load(String.new("std"),String.new("random_float"),1);
Math._rand_int = neko.Lib.load(String.new("std"),String.new("random_int"),2);
String.__split = neko.Lib.load(String.new("std"),String.new("string_split"),2);
StringBuf.__make = neko.Lib.load(String.new("std"),String.new("buffer_new"),0);
StringBuf.__add = neko.Lib.load(String.new("std"),String.new("buffer_add"),2);
StringBuf.__add_char = neko.Lib.load(String.new("std"),String.new("buffer_add_char"),2);
StringBuf.__to_string = neko.Lib.load(String.new("std"),String.new("buffer_string"),1);
Sys.file_stdin = neko.Lib.load(String.new("std"),String.new("file_stdin"),0);
sys.io.FileInput.file_eof = neko.Lib.load(String.new("std"),String.new("file_eof"),1);
sys.io.FileInput.file_read = neko.Lib.load(String.new("std"),String.new("file_read"),4);
sys.io.FileInput.file_read_char = neko.Lib.load(String.new("std"),String.new("file_read_char"),1);
sys.io.FileInput.file_close = neko.Lib.load(String.new("std"),String.new("file_close"),1);
sys.io.FileInput.file_seek = neko.Lib.load(String.new("std"),String.new("file_seek"),3);
sys.io.FileInput.file_tell = neko.Lib.load(String.new("std"),String.new("file_tell"),1);
Main.main();
